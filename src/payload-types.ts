/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    books: Book;
    authors: Author;
    categories: Category;
    chapters: Chapter;
    'user-backups': UserBackup;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    books: BooksSelect<false> | BooksSelect<true>;
    authors: AuthorsSelect<false> | AuthorsSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    chapters: ChaptersSelect<false> | ChaptersSelect<true>;
    'user-backups': UserBackupsSelect<false> | UserBackupsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  /**
   * Alternative text for accessibility and SEO
   */
  alt: string;
  /**
   * Image caption or description
   */
  caption?: string | null;
  /**
   * Type of media asset for better organization
   */
  type?:
    | ('book-cover' | 'author-photo' | 'category-icon' | 'chapter-image' | 'hero' | 'thumbnail' | 'document' | 'other')
    | null;
  /**
   * Tags for organizing and searching media
   */
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Photographer or image source credit
   */
  photographer?: string | null;
  /**
   * Image licensing information
   */
  license?: ('all-rights-reserved' | 'creative-commons' | 'public-domain' | 'stock-photo' | 'custom') | null;
  /**
   * Mark as featured media for easy access
   */
  featured?: boolean | null;
  /**
   * SEO optimization settings
   */
  seo?: {
    /**
     * SEO title for the image
     */
    title?: string | null;
    /**
     * SEO description for the image
     */
    description?: string | null;
    /**
     * SEO keywords (comma-separated)
     */
    keywords?: string | null;
  };
  /**
   * Usage tracking and metadata
   */
  usage?: {
    /**
     * Number of times downloaded
     */
    downloadCount?: number | null;
    /**
     * Last time this media was used
     */
    lastUsed?: string | null;
    /**
     * Collections where this media is used
     */
    usedIn?:
      | {
          collection?: string | null;
          documentId?: string | null;
          field?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    cover?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    hero?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    mobile?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "books".
 */
export interface Book {
  id: number;
  /**
   * The title of the book
   */
  title: string;
  /**
   * URL-friendly version of the title
   */
  slug: string;
  /**
   * The author of this book
   */
  author: number | Author;
  /**
   * Cover image for the book
   */
  coverImage: number | Media;
  /**
   * Book description or synopsis
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * When the book was published
   */
  publicationDate: string;
  /**
   * International Standard Book Number
   */
  isbn?: string | null;
  /**
   * Book categories/genres
   */
  categories?: (number | Category)[] | null;
  language: 'en' | 'es' | 'fr' | 'de' | 'it' | 'pt' | 'other';
  /**
   * Number of pages in the book
   */
  pageCount?: number | null;
  /**
   * Publication status of the book
   */
  status: 'draft' | 'published' | 'archived';
  /**
   * Mark as featured book
   */
  featured?: boolean | null;
  /**
   * Number of chapters in this book
   */
  chaptersCount?: number | null;
  /**
   * Additional tags for search and filtering
   */
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Number of times this book has been downloaded
   */
  downloadCount?: number | null;
  /**
   * Average user rating (calculated field)
   */
  averageRating?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "authors".
 */
export interface Author {
  id: number;
  /**
   * Full name of the author
   */
  name: string;
  /**
   * URL-friendly version of the author name
   */
  slug: string;
  /**
   * Author biography
   */
  bio?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Author profile photo
   */
  photo?: (number | null) | Media;
  /**
   * Author contact email
   */
  email?: string | null;
  /**
   * Author website URL
   */
  website?: string | null;
  /**
   * Social media links
   */
  socialMedia?: {
    twitter?: string | null;
    facebook?: string | null;
    instagram?: string | null;
    linkedin?: string | null;
  };
  /**
   * Number of books by this author
   */
  booksCount?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  /**
   * Category name (e.g., Fiction, Science, History)
   */
  name: string;
  /**
   * URL-friendly version of the category name
   */
  slug: string;
  /**
   * Brief description of this category
   */
  description?: string | null;
  /**
   * Hex color code for category display (e.g., #FF5733)
   */
  color?: string | null;
  /**
   * Optional icon for the category
   */
  icon?: (number | null) | Media;
  /**
   * Parent category for hierarchical organization
   */
  parentCategory?: (number | null) | Category;
  /**
   * Show this category prominently
   */
  featured?: boolean | null;
  /**
   * Number of books in this category
   */
  booksCount?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chapters".
 */
export interface Chapter {
  id: number;
  /**
   * Chapter title
   */
  title: string;
  /**
   * URL-friendly version of the chapter title
   */
  slug: string;
  /**
   * The book this chapter belongs to
   */
  book: number | Book;
  /**
   * Chapter order/number within the book
   */
  chapterNumber: number;
  /**
   * The full content of this chapter
   */
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Brief chapter summary or excerpt
   */
  summary?: string | null;
  /**
   * Approximate word count for this chapter
   */
  wordCount?: number | null;
  /**
   * Estimated reading time in minutes
   */
  estimatedReadingTime?: number | null;
  /**
   * Publication status of the chapter
   */
  status: 'draft' | 'review' | 'published' | 'archived';
  /**
   * When this chapter was published
   */
  publishedAt?: string | null;
  /**
   * Mark as featured chapter (for previews, etc.)
   */
  featured?: boolean | null;
  /**
   * Internal notes for editors/authors
   */
  notes?: string | null;
  /**
   * Chapter-specific tags for organization
   */
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Reading progress tracking metadata
   */
  readingProgress?: {
    /**
     * Average time users spend reading this chapter (minutes)
     */
    averageReadingTime?: number | null;
    /**
     * Percentage of users who complete this chapter
     */
    completionRate?: number | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-backups".
 */
export interface UserBackup {
  id: number;
  /**
   * User email for backup identification
   */
  email: string;
  /**
   * Token for email verification
   */
  verificationToken?: string | null;
  /**
   * Whether the email has been verified
   */
  isVerified?: boolean | null;
  /**
   * When the email was verified
   */
  verifiedAt?: string | null;
  /**
   * User reading progress data (JSON format)
   */
  progress?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * User bookmarks data (JSON format)
   */
  bookmarks?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * User app preferences (theme, font size, etc.)
   */
  preferences?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Last time data was synced
   */
  lastSyncAt?: string | null;
  /**
   * Information about the user device
   */
  deviceInfo?: {
    platform?: ('web' | 'ios' | 'android') | null;
    appVersion?: string | null;
    /**
     * Unique device identifier
     */
    deviceId?: string | null;
  };
  /**
   * Total number of books completed
   */
  totalBooksRead?: number | null;
  /**
   * Total reading time in minutes
   */
  totalReadingTime?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'books';
        value: number | Book;
      } | null)
    | ({
        relationTo: 'authors';
        value: number | Author;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'chapters';
        value: number | Chapter;
      } | null)
    | ({
        relationTo: 'user-backups';
        value: number | UserBackup;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  type?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  photographer?: T;
  license?: T;
  featured?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        keywords?: T;
      };
  usage?:
    | T
    | {
        downloadCount?: T;
        lastUsed?: T;
        usedIn?:
          | T
          | {
              collection?: T;
              documentId?: T;
              field?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        cover?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        hero?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        mobile?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "books_select".
 */
export interface BooksSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  author?: T;
  coverImage?: T;
  description?: T;
  publicationDate?: T;
  isbn?: T;
  categories?: T;
  language?: T;
  pageCount?: T;
  status?: T;
  featured?: T;
  chaptersCount?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  downloadCount?: T;
  averageRating?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "authors_select".
 */
export interface AuthorsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  bio?: T;
  photo?: T;
  email?: T;
  website?: T;
  socialMedia?:
    | T
    | {
        twitter?: T;
        facebook?: T;
        instagram?: T;
        linkedin?: T;
      };
  booksCount?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  color?: T;
  icon?: T;
  parentCategory?: T;
  featured?: T;
  booksCount?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chapters_select".
 */
export interface ChaptersSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  book?: T;
  chapterNumber?: T;
  content?: T;
  summary?: T;
  wordCount?: T;
  estimatedReadingTime?: T;
  status?: T;
  publishedAt?: T;
  featured?: T;
  notes?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  readingProgress?:
    | T
    | {
        averageReadingTime?: T;
        completionRate?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-backups_select".
 */
export interface UserBackupsSelect<T extends boolean = true> {
  email?: T;
  verificationToken?: T;
  isVerified?: T;
  verifiedAt?: T;
  progress?: T;
  bookmarks?: T;
  preferences?: T;
  lastSyncAt?: T;
  deviceInfo?:
    | T
    | {
        platform?: T;
        appVersion?: T;
        deviceId?: T;
      };
  totalBooksRead?: T;
  totalReadingTime?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}